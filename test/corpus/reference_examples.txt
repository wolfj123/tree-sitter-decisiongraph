==================
ask node
==================

[ask:
  {text: Do the data concern living persons?}
  {answers:
    {yes: [set: livingPersons=yes][call: privacySection ] }
    {no: [call: nonHuman] }}]
[ask:
  {text: Do the data contain personally identifying information, as defined under HIPAA?}
  {terms:
    {Personally identifying information: This means the name, address, fingerprints...}
    {HIPAA: Health Insurance Portability and Accountability Act}}
  {answers:
    {yes: [set: livingPersons=yes][call: privacySection ] }
    {no: [call: nonHuman] }}]

---
(source_file (decision_graph (ask_node (text_sub_node (free_text)) (answers_sub_node (answer_sub_node (free_text) (decision_graph (set_node (assignment_slot (atomic_assignment_slot (slot) (slot_value)))) (call_node))) (answer_sub_node (free_text) (decision_graph (call_node))))) (ask_node (text_sub_node (free_text)) (terms_sub_node (term_sub_node (free_text) (free_text)) (term_sub_node (free_text) (free_text))) (answers_sub_node (answer_sub_node (free_text) (decision_graph (set_node (assignment_slot (atomic_assignment_slot (slot) (slot_value)))) (call_node))) (answer_sub_node (free_text) (decision_graph (call_node)))))))
						

==================
ask yes no node
==================

[>q1< ask:
  {text: Do the data contain health information?}
  {answers:
    {yes: [call: healthSection]}}]

---
(source_file (decision_graph (ask_node (node_id) (text_sub_node (free_text)) (answers_sub_node (answer_sub_node (free_text) (decision_graph (call_node)))))))


==================
call node
==================

[>n1< call: p1]

[-->p1<
  [>n3< set: hello=world]
  [>n4< ask:
    {text: continue?}
    {answers : 
      {no: [end]}
    }
  ]
  [>n5< set: lorem=ipsum]
--]

---

(source_file (decision_graph (call_node (node_id)) (part_node (node_id) (decision_graph (set_node (node_id) (assignment_slot (atomic_assignment_slot (slot) (slot_value)))) (ask_node (node_id) (text_sub_node (free_text)) (answers_sub_node (answer_sub_node (free_text) (decision_graph (end_node))))) (set_node (node_id) (assignment_slot (atomic_assignment_slot (slot) (slot_value))))))))


==================
consider node
==================

<* SubjectType may have been collected above *>
[>cn< consider:
  {slot: SubjectType}
  {options:
    {mineral: [set: Harm=minimal]}
    {animal:  [set: Harm=moderate]}
    {human:   [call: assesHumanHarm]}
  }
  {else: <-- this part is optional
    [call: open-data]
  }
]
---

(source_file (comment) (decision_graph (consider_node (node_id) (slot_sub_node (slot)) (consider_options_sub_node (consider_option_sub_node (slot_value) (decision_graph (set_node (assignment_slot (atomic_assignment_slot (slot) (slot_value)))))) (consider_option_sub_node (slot_value) (decision_graph (set_node (assignment_slot (atomic_assignment_slot (slot) (slot_value)))))) (consider_option_sub_node (slot_value) (decision_graph (call_node)))) (else_sub_node (comment) (decision_graph (call_node))))))


==================
when node
==================
[when:
  {Subjects+=livingPresons: [call: privacy]}
  {Subjects+=deceasedPresons; Domains += medical: [call: privacy]}
  {else:
    [call: open-data]
  }
]

---

(source_file (decision_graph (when_node (when_answer_sub_node (assignment_slot (aggregate_assignment_slot (slot) (slot_value))) (decision_graph (call_node))) (when_answer_sub_node (assignment_slot (assignment_slot (aggregate_assignment_slot (slot) (slot_value))) (assignment_slot (aggregate_assignment_slot (slot) (slot_value)))) (decision_graph (call_node))) (else_sub_node (decision_graph (call_node))))))


==================
end node
==================

[>n1< call: n2]
[>n2< end]

---

(source_file (decision_graph (call_node (node_id)) (end_node (node_id))))

==================
reject node
==================

[ask : {text: Where the data obtained by breaking and entry?}
  {answers:
    {yes: [reject: Cannot deposit data obtained by breaching the law.]}}]

---

(source_file (decision_graph (ask_node (text_sub_node (free_text)) (answers_sub_node (answer_sub_node (free_text) (decision_graph (reject_node (free_text))))))))


==================
section node
==================


[>id< section:
  {title:Section title} <-- Optional
  [todo: ]
]

---

(source_file (decision_graph (section_node (node_id) (info_sub_node (free_text)) (comment) (decision_graph (todo_node)))))


==================
skipping
==================

[section:
  {title: Health Data}
  [ask:
    {text: Are there any related health issues?}
    {answers:
      {no: [continue]}
    }
  ]

]

---

(source_file (decision_graph (section_node (info_sub_node (free_text)) (decision_graph (ask_node (text_sub_node (free_text)) (answers_sub_node (answer_sub_node (free_text) (decision_graph (continue_node)))))))))


==================
set node
==================
[set: DataTags/Mid1/Bottom1=b1a]
[set: DataTags/Mid2/Bottom2+=b2b, b2c]
[set: DataTags/Mid1/Bottom1=b1a; DataTags/Mid2/Bottom2+={b2b, b2c}]
[set: Mid1/Bottom1=b1a; Mid2/Bottom2+=b2b, b2c]
[set: Bottom1=b1a; Mid2/Bottom2+=b2b, b2c]

---

(source_file (decision_graph (set_node (assignment_slot (atomic_assignment_slot (slot) (slot_value)))) (set_node (assignment_slot (aggregate_assignment_slot (slot) (slot_value) (slot_value)))) (set_node (assignment_slot (assignment_slot (atomic_assignment_slot (slot) (slot_value))) (assignment_slot (aggregate_assignment_slot (slot) (slot_value) (slot_value))))) (set_node (assignment_slot (assignment_slot (atomic_assignment_slot (slot) (slot_value))) (assignment_slot (aggregate_assignment_slot (slot) (slot_value) (slot_value))))) (set_node (assignment_slot (assignment_slot (atomic_assignment_slot (slot) (slot_value))) (assignment_slot (aggregate_assignment_slot (slot) (slot_value) (slot_value)))))))

==================
todo
==================
[todo: implement tagging for financial data]

---

(source_file (decision_graph (todo_node (free_text))))


==================
todo2
==================
[ask:
  {text: Do the data contain health information?}
  {answers:
    {yes: [call :healthInfo]}}]
[ask:
  {text: Do the data contain financial information?}
  {answers:
    {yes: [call: financialInfo]}}]
[todo: tag for data use agreements]
[end]

[>healthInfo< todo: implement!]
[end]

[>financialInfo< todo: implement!]
[end]

---

(source_file (decision_graph (ask_node (text_sub_node (free_text)) (answers_sub_node (answer_sub_node (free_text) (decision_graph (call_node))))) (ask_node (text_sub_node (free_text)) (answers_sub_node (answer_sub_node (free_text) (decision_graph (call_node))))) (todo_node (free_text)) (end_node) (todo_node (node_id) (free_text)) (end_node) (todo_node (node_id) (free_text)) (end_node)))


==================
import
==================

[#import storage: aux/storage.dg]
[call: aux>encryption]
[call: aux>open-formats]

---

(source_file ) 


